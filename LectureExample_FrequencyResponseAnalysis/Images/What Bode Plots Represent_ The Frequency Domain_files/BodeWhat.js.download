var BWhat;

function chooseXfer(x) {
    // This function records which transfer function is being used, and makes all necessary changes.

    BWhat.xFunc = x;

    if (x == 1) {
        BWhat.xFunc = 1;
        BWhat.magChart.yAxis[0].setExtremes(0, 1);
        BWhat.phsChart.yAxis[0].setExtremes(-90, 0);
    } else {
        BWhat.xFunc = 2;
        BWhat.magChart.yAxis[0].setExtremes(0, 3);
        BWhat.phsChart.yAxis[0].setExtremes(-180, 0);
    }

    q = BWhat.w.map(w => [w, HMag(w)]); // q hold array to be plotted.
    BWhat.magChart.get('yVals').setData(q);

    q = BWhat.w.map(w => [w, HPhs(w)]);
    BWhat.phsChart.get('yVals').setData(q);

    refreshFunc(BWhat.omegaCtrl.getValue());
}

function HMag(w) {
    if (BWhat.xFunc == 1)
        return Math.sqrt(1 / (1 + w * 2 * w * 2));
    else
        return Math.sqrt(1.6 * 1.6 / ((1.6 - w * w) * (1.6 - w * w) + 0.5 * w * 0.5 * w));
}

function HPhs(w) {
    if (BWhat.xFunc == 1)
        return -180 / Math.PI * Math.atan2(2 * w, 1);
    else
        return -180 / Math.PI * Math.atan2(0.5 * w, 1.6 - w * w);
}


$(function () {

    BWhat = new make_BWhat(); // Create object for constant

    chooseXfer(1);
});

function myCB(x) {
    refreshFunc(BWhat.omegaCtrl.getValue());
};


function refreshFunc(omega) {
    var Hn, Hdr, Hdi; //Transfer function numerator, real den, imag den.
    const pi = Math.PI;
    let A = BWhat.magCtrl.getValue();
    let phi = BWhat.phsCtrl.getValue();

    omega = parseFloat(omega.toFixed(2));

    BWhat.omegaCtrl.setValue(omega);
    let myMag = parseFloat(HMag(omega).toFixed(2));
    let myPhs = parseFloat(HPhs(omega).toFixed(1));
    BWhat.magChart.get('yVal').setData([
        [omega, myMag]
    ]);
    BWhat.phsChart.get('yVal').setData([
        [omega, myPhs]
    ]);

    if (BWhat.xFunc == 1) {
        Hn = 1;
        Hdr = 1;
        Hdi = omega * 2;
        BWhat.tChart.yAxis[0].setExtremes(-2, 2);
    } else {
        Hn = 1.6;
        Hdr = 1.6 * 1.6 - omega * omega;
        Hdi = 0.5 * omega;
        BWhat.tChart.yAxis[0].setExtremes(-4, 4);
    }


    let M = parseFloat(HMag(omega).toFixed(2)); // Magnitude of TF
    let theta = parseFloat(HPhs(omega).toFixed(1)); // Phase of TF
    let ang = parseFloat((theta + phi).toFixed(1)); // total angle

    let y = `<br />
    At &omega; =${omega}, 
    H(<em>j</em>&omega;) = ${Hn}/(${Hdr.toFixed(2)} + j${Hdi.toFixed(2)}) = ${M}&ang;${theta}&deg = M&ang;&theta;. <br />
    Since the input can be represented as ${A}&ang;${phi}&deg;, <br />
    The output is M&middot;A&ang;(&theta;+&phi;) = ${(M*A).toFixed(2)}&ang;${ang}&deg;. <br \>
    <table class="skinnyTable" cellpadding=8 style="empty-cells:hide;">
    <tr>
      <td></td>
      <td><strong>Magnitude</strong></td>
      <td><strong>Phase</strong></td>
      <td style="width:12em;"><strong>Time Domain</strong></td>
    </tr>
    <tr>
      <td><strong>H(<em>j</em>&omega;)</strong></td>
      <td>${M}</td>
      <td>${theta}&deg;</td>
      <td>${M}&middot;cos(${omega}&middot;t + ${theta}&deg;)</td>
    </tr>
    <tr>
      <td><strong>Input</strong></td>
      <td>${A}</span></td>
      <td>${phi}&deg;</span></td>
      <td>${A}&middot;cos(${omega}&middot;t + ${phi}&deg;)</td>
    </tr>
    <tr>
      <td><strong>Output</strong></td>
      <td>${(M*A).toFixed(2)}</td>
      <td>${ang}&deg;</td>
      <td>${(M*A).toFixed(2)}&middot;cos(${omega}&middot;t + ${ang}&deg;)</td>
    </tr>
  </table>`;
    $('#doCalcs').html(y);
    MathJax.Hub.Queue(["Typeset", MathJax.Hub, "doCalcs"]);

    var q = BWhat.t.map(t => [t, A * Math.cos(omega * t + phi * pi / 180)]); // q hold array to be plotted.
    BWhat.tChart.get('inY').setData(q);

    q = BWhat.t.map(t => [t, M * A * Math.cos(omega * t + (theta + phi) * pi / 180)]); // q hold array to be plotted.
    BWhat.tChart.get('outY').setData(q);
    let m = Math.floor((10 * omega) / 2 / Math.PI);
    //let tzcIn = (2 * m * pi - pi / 2 - phi * pi / 180) / omega;
    let tzcIn = (3 * pi / 2 - phi * pi / 180) / omega; //time of zero crossing input
    let tzcOut = tzcIn - theta * pi / 180 / omega;
    let tzcIn2 = tzcIn + 2 * pi / omega;

    BWhat.tChart.xAxis[0].update({
        plotLines: vertLines(tzcIn, tzcOut, tzcIn2)
    });

    BWhat.tChart.get('delay').setData([{
            x: tzcIn,
            y: 1.5,
            dataLabels: {
                enabled: true,
                format: $('<div>delay, T<sub>d</sub></div>').html(),
                color: 'green',
                align: 'center'
            }
        },
        {
            x: tzcOut,
            y: 1.5
        }
    ]);
    BWhat.tChart.get('period').setData([{
        x: tzcIn,
        y: -1.5,
        dataLabels: {
            enabled: true,
            format: $('<div>period, T</div>').html(),
            align: 'center',
            color: 'maroon'
        }
    }, {
        x: tzcIn2,
        y: -1.5
    }]);

    BWhat.tChart.get('vInXing').setData([
        [tzcIn, 0]
    ]);
    BWhat.tChart.get('vOutXing').setData([
        [tzcOut, 0]
    ]);
    BWhat.tChart.get('vInXing2').setData([
        [tzcIn2, 0]
    ]);

}

function vertLines(tzcIn, tzcOut, tzcIn2) {
    return [{
            color: 'gray',
            dashStyle: 'dash',
            width: 2,
            value: tzcIn,
            zIndex: 5 // Position, you'll have to translate this to the values on your x axis
        },
        {
            color: 'gray',
            dashStyle: 'dash',
            width: 2,
            value: tzcOut,
            zIndex: 5 // Position, you'll have to translate this to the values on your x axis
        }, {
            color: 'gray',
            dashStyle: 'dash',
            width: 2,
            value: tzcIn2,
            zIndex: 5 // Position, you'll have to translate this to the values on your x axis
        }
    ]
}

function make_BWhat() {
    this.omegaCtrl = new slideText('setOmega', '&omega;', 0, 3, 0.1, 1, myCB);
    this.magCtrl = new slideText('setMag', 'A', 0.2, 2, 0.1, 1, myCB);
    this.phsCtrl = new slideText('setPhs', '&phi;', -180, 180, 5, 0, myCB);

    this.magChart = makeMChart(0, 3, 0, 3, 'magPlot');

    this.phsChart = makeMChart(0, 3, -180, 180, 'phsPlot');
    this.phsChart.setTitle({
        text: $('<div>Phase of H(<em>j</em>&omega;), (<em>i.e.</em>, &ang;H(<em>j</em>&omega;)), vs &omega;</div>').html()
    });
    this.phsChart.yAxis[0].update({
        tickInterval: 45,
        title: {
            text: $('<div>&ang;H(<em>j</em>&omega;), &deg;</div>').html()
        },
    });
    this.phsChart.get('yVals').update({
        color: 'red'
    });
    this.phsChart.get('yVal').update({
        marker: {
            fillColor: 'red'
        }
    });

    this.tChart = makeTChart(0, 20, -4, 4, 'tPlot');

    this.w = linspace(0, 3, 250);
    this.t = linspace(0, 20, 250);

    this.xFunc = 1;
}




function makeMChart(wMin, wMax, yMin, yMax, myId) {
    var myChart = Highcharts.chart(myId, {
        legend: {
            enabled: false
        },
        tooltip: {
            enabled: false
        },
        credits: {
            enabled: false
        },
        chart: {
            backgroundColor: 'transparent',
            plotBorderColor: '#888',
            plotBorderWidth: 2,
            animation: false,
            // height: '250px'
        },
        animation: false,
        title: {
            text: $('<div>Magnitude of H(<em>j</em>&omega;), (<em>i.e.</em>, |H(<em>j</em>&omega;)|), vs &omega;</div>').html()
        },
        plotOptions: {
            animation: false,
            line: {
                marker: {
                    enabled: false
                }
            },
            series: {
              states: {
      inactive: {
        opacity: 1
      }
    },
                marker: {
                    states: {
                        hover: {
                            enabled: false,
                        },
                        inactive: {
                            opacity: 1
                        }
                    }
                }
            }
        },
        xAxis: {
            max: wMax,
            min: wMin,
            gridLineWidth: 2,
            minorTickInterval: 0.1,
            tickInterval: 1,
            title: {
                text: $('<div>&omega;</div>').html()
            },
        },
        yAxis: {
            title: {
                text: $('<div>|H(<em>j</em>&omega;)|</div>').html()
            },
            max: yMax,
            min: yMin,
            gridLineWidth: 2,
            tickInterval: 1,
            startOnTick: false,
            endOnTick: false
        },


        series: [{
            name: 'yVals',
            id: 'yVals',
            data: [ // placeholder
                [wMin, yMax],
                [wMax, yMin]
            ],
            marker: {
                enabled: false
            },
            color: 'blue'
        }, {
            name: 'yVal',
            id: 'yVal',
            data: [
                [wMax / 2, 3] // placeholder
            ],
            dataLabels: {
                enabled: true
            },
            type: 'scatter',
            marker: {
                symbol: 'circle',
                fillColor: "blue",
                radius: 4
            }
        }]
    });

    $('#' + myId).on('click', function (e) {
        let chart = $(this).highcharts();
        e = chart.pointer.normalize(e);
        let inChart = chart.isInsidePlot(e.chartX - chart.plotLeft, e.chartY - chart.plotTop);
        if (inChart) {
            let w = chart.xAxis[0].toValue(e.chartX);
            refreshFunc(w);
        }
    });

    $('#' + myId).on('mousemove', function (e) {
        let chart = $(this).highcharts();
        e = chart.pointer.normalize(e);
        let inChart = chart.isInsidePlot(e.chartX - chart.plotLeft, e.chartY - chart.plotTop);
        if (e.buttons & inChart) {
            let w = chart.xAxis[0].toValue(e.chartX);
            refreshFunc(w);
        }
    });

    return myChart;
};




function makeTChart(tMin, tMax, yMin, yMax, myId) {
    var myChart = Highcharts.chart(myId, {
        legend: {
            enabled: true,
            floating: true,
            align: 'right',
            verticalAlign: 'top',
            useHTML: true
        },
        tooltip: {
            enabled: false
        },
        credits: {
            enabled: false
        },
        chart: {
            plotBorderColor: '#888',
            plotBorderWidth: 2,
            animation: false,
        },
        animation: false,
        title: {
            useHTML: true,
            text: $('<div>V<sub>in</sub>(t) &amp; V<sub>out</sub>(t) vs. t</div>').html()
        },
        plotOptions: {
            animation: false,
            line: {
                marker: {
                    enabled: false
                }
            },
            series: {
                states: {
                    inactive: {
                        opacity: 1
                    }
                },
                marker: {
                    states: {
                        hover: {
                            enabled: false,
                        }
                    },
                    enabled: false
                }
            }
        },
        xAxis: {
            max: tMax,
            min: tMin,
            gridLineWidth: 2,
            tickInterval: 1,
            title: {
                text: 'time'
            },
            plotLines: vertLines(0, 1, 2)
        },
        yAxis: {
            title: {
                useHTML: true,
                text: $('<div>V<sub>in</sub>(t), V<sub>out</sub>(t)</div>').html()
                // html: '&theta;'
            },
            max: yMax,
            min: yMin,
            gridLineWidth: 2,
            tickInterval: 1
        },

        series: [{
                name: 'V<sub>in</sub>(t)',
                id: 'inY',

                data: [ // placeholder
                    [tMin, yMax],
                    [tMax, yMin]
                ],
                color: 'black',
                showInLegend: true
            },
            {
                name: 'V<sub>out</sub>(t)',
                id: 'outY',

                data: [ // placeholder
                    [tMin, yMin],
                    [tMax, yMax]
                ],
                color: 'magenta',
                showInLegend: true
            },
            {
                name: 'delay',
                id: 'delay',

                data: [ // placeholder
                    [tMin, yMin],
                    [tMax, yMax]
                ],
                color: 'green',
                dashStyle: 'ShortDash',
                showInLegend: false
            },

            {
                name: 'period',
                id: 'period',
                color: 'maroon',
                dashStyle: 'ShortDash',

                data: [ // placeholder
                    [tMin, yMin],
                    [tMax, yMax]
                ],
                showInLegend: false
            },

            {
                name: 'vInXing', // (first) Zero Xing of Vin
                id: 'vInXing',
                color: 'black',
                type: 'scatter',
                data: [ // placeholder
                    [10, 0]
                ],
                marker: {
                    enabled: true,
                    symbol: 'circle',
                    fillColor: 'black',
                    radius: 4
                },
                showInLegend: false
            },

            {
                name: 'vOutXing', // (first) Zero Xing of Vout
                id: 'vOutXing',
                color: 'green',
                type: 'scatter',
                data: [ // placeholder
                    [10, 1]
                ],
                marker: {
                    enabled: true,
                    symbol: 'circle',
                    fillColor: 'green',
                    radius: 4
                },
                showInLegend: false
            },

            {
                name: 'vInXing2', // (second) Zero Xing of Vin
                id: 'vInXing2',
                color: 'black',
                type: 'scatter',
                data: [ // placeholder
                    [10, 2]
                ],
                marker: {
                    enabled: true,
                    symbol: 'circle',
                    fillColor: 'black',
                    radius: 4
                },
                showInLegend: false
            }
        ]
    });

    return myChart;
};